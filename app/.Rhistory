labels<-label%*%as.matrix(alpha)
out<-sign(labels)
return(out)
}
agg_class(x_test,ada$alpha,ada$allPars)
library("freestats")
library("sigmoid")
train <- function(X,w,y) {
out<-decisionStump(X,w,y)
return(list(j=out$j,theta=out$theta,m=out$m))
}
classify <- function(x, pars) {
j<-pars$j
theta<-pars$theta
m<-pars$m
out<-rep(NA,nrow(x))
for (i in 1:nrow(x)){
out[i]<-ifelse(x[i,j]>theta,m,-m)
}
return(out)
}
X=x_test
agg_class<-function(X,alpha,allPars){
label<-matrix(NA,nrow=nrow(X),ncol=length(alpha))
for( b in 1:length(alpha)){
for(i in 1:nrow(X)){
label[i,b]<-classify(X[i],allPars[[b]])
}
}
labels<-label%*%as.matrix(alpha)
out<-sign(labels)
return(out)
}
agg_class<-function(X,alpha,allPars){
label<-matrix(NA,nrow=nrow(X),ncol=length(alpha))
for( b in 1:length(alpha)){
for(i in 1:nrow(X)){
label[i,b]<-classify(X[i],allPars[[b]])
}
}
labels<-label%*%as.matrix(alpha)
out<-sign(labels)
return(out)
}
agg_class(x_test,ada$alpha,ada$allPars)
allPars[[1]]
agg_class<-function(X,alpha,allPars){
label<-matrix(NA,nrow=nrow(X),ncol=length(alpha))
for( b in 1:length(alpha)){
label[,b]<-classify(X,allPars[[b]])
}
labels<-label%*%as.matrix(alpha)
out<-sign(labels)
return(out)
}
agg_class(x_test,ada$alpha,ada$allPars)
train_error<-mean(agg_class(x_train,ada$alpha,ada$allPars)!=y_train)
test_error<-mean(agg_class(x_test,ada$alpha,ada$allPars)!=test)
train_error<-mean(agg_class(x_train,ada$alpha,ada$allPars)!=y_train)
test_error<-mean(agg_class(x_test,ada$alpha,ada$allPars)!=y_test)
train_error
test_error
ada<-AdaBoost_algorithm(B=10,X=x_train,y=y_train,w=w_initial)
allPars<-ada$allPars
alpha<-ada$alpha
train_error<-mean(agg_class(x_train,ada$alpha,ada$allPars)!=y_train)
test_error<-mean(agg_class(x_test,ada$alpha,ada$allPars)!=y_test)
train_error
test_error
b<-seq(1,10,1)
error_train<-rep(NA,10)
error_test<-rep(NA,10)
for (B in b){
adab<-AdaBoost_algorithm(B,X=x_train,y=y_train,w=w_initial)
error_train[B]<-mean(agg_class(x_train,adab$alpha,adab$allPars)!=y_train)
error_test[B]<-mean(agg_class(x_test,adab$alpha,adab$allPars)!=y_test)
}
BackPropData<-read.csv('BackPropData.csv')
setwd("/Users/yue/Downloads")
BackPropData<-read.csv('BackPropData.csv')
BackPropData<-read.csv('BackPropData.csv')
BackPropData
x<-matrix(data=c(BackPropData$X1,BackPropData$X2),2,length(BackPropData$X1), byrow=T)
x
as.logical(BackPropData$Y)
n<-nrow(BackPropData)
matrix(rep(b1,n), nrow = 3, ncol = n)
b2<-matrix(data=c(-0.4115,0.2522),2,1,byrow=T)
matrix(rep(b1,n), nrow = 3, ncol = n)
b1<-matrix(data=c(-0.9286,-0.2947,-0.0058),3,1,byrow=T)
matrix(rep(b1,n), nrow = 3, ncol = n)
matrix(rep(1,n), nrow = n, ncol = 1)
#install.packages("sigmoid")
library(sigmoid)
BackPropData<-read.csv('BackPropData.csv')
w1<-matrix(data=c(1.2630,1.2724,-0.3262,0.4146,1.3298,-1.5400),3,2,byrow=T)
w2<-matrix(data=c(2.4047,-0.7990,-0.2895,0.7636,-1.1477,-0.2992),2,3,byrow=T)
b1<-matrix(data=c(-0.9286,-0.2947,-0.0058),3,1,byrow=T)
b2<-matrix(data=c(-0.4115,0.2522),2,1,byrow=T)
x<-matrix(data=c(BackPropData$X1,BackPropData$X2),2,length(BackPropData$X1), byrow=T)
y.reverse<-as.integer(!as.logical(BackPropData$Y))
e<-matrix(c(BackPropData$Y,y.reverse),2,length(y.reverse),byrow = T)
n<-nrow(BackPropData)
A_1<-w1%*%x+matrix(rep(b1,n), nrow = 3, ncol = n)
H_1<-sigmoid(A_1)
A_2<-w2%*%H_1+matrix(rep(b2,n), nrow = 2, ncol = n)
p<-SoftMax(A_2)
#H_0<-x
A_2_Q<- -(e-p)
W_2_Q<-A_2_Q%*%t(H_1)
B_2_Q<-A_2_Q%*%matrix(rep(1,n), nrow = n, ncol = 1)
H_1_Q<-t(W_2_Q)%*%A_2_Q
deriv<-sigmoid_output_to_derivative(sigmoid(A_1))
A_1_Q<-H_1_Q*deriv
W_1_Q<-A_1_Q%*%t(H_0)
#install.packages("sigmoid")
library(sigmoid)
BackPropData<-read.csv('BackPropData.csv')
w1<-matrix(data=c(1.2630,1.2724,-0.3262,0.4146,1.3298,-1.5400),3,2,byrow=T)
w2<-matrix(data=c(2.4047,-0.7990,-0.2895,0.7636,-1.1477,-0.2992),2,3,byrow=T)
b1<-matrix(data=c(-0.9286,-0.2947,-0.0058),3,1,byrow=T)
b2<-matrix(data=c(-0.4115,0.2522),2,1,byrow=T)
x<-matrix(data=c(BackPropData$X1,BackPropData$X2),2,length(BackPropData$X1), byrow=T)
y.reverse<-as.integer(!as.logical(BackPropData$Y))
e<-matrix(c(BackPropData$Y,y.reverse),2,length(y.reverse),byrow = T)
n<-nrow(BackPropData)
A_1<-w1%*%x+matrix(rep(b1,n), nrow = 3, ncol = n)
H_1<-sigmoid(A_1)
A_2<-w2%*%H_1+matrix(rep(b2,n), nrow = 2, ncol = n)
p<-SoftMax(A_2)
H_0<-x
A_2_Q<- -(e-p)
W_2_Q<-A_2_Q%*%t(H_1)
B_2_Q<-A_2_Q%*%matrix(rep(1,n), nrow = n, ncol = 1)
H_1_Q<-t(W_2_Q)%*%A_2_Q
deriv<-sigmoid_output_to_derivative(sigmoid(A_1))
A_1_Q<-H_1_Q*deriv
W_1_Q<-A_1_Q%*%t(H_0)
B_1_Q<-A_1_Q%*%matrix(rep(1,n), nrow = n, ncol = 1)
list(W_2_Q=W_2_Q,B_2_Q=B_2_Q,W_1_Q=W_1_Q,B_1_Q=B_1_Q)
H<-matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
H<-matrix(readBin("histograms.bin", "double", 640000), 40000, 16)
dim(H)
head(rowSums(H),6)
MultinomialEM<-function(H,K,tau){
n <- nrow(H)
index <- sample(1:n, K, replace=F)
t <- H[index, ]
t<-ifelse(t== 0, 0.01, t)
c <- rep(1/K, K)
phi<-matrix(NA,n,K)
a<-matrix(NA,n,K)
b <- matrix(rep(0, ncol(H)*K), K)
m <- rep(0, n)
sigma <- Inf
r <- 1
while(sigma >= tau){
a.old<-a
phi<-exp(H%*%t(log(t)))
a<-t(c*t(phi))/rowSums(t(c*t(phi)))
c<-colMeans(a)
for (k in 1:K) {
b[k,] <- colSums(sweep(H, 1, a[,k], '*')) }
t <- b/rowSums(b)
sigma <- ifelse(r==1, Inf, norm(a-a.old,"O"))
r <- r+1
}
m<-apply(a, 1, FUN = which.max)
return(m)
}
head(H,6)
head(rowsum(H),6)
head(rowsum(H),6)
rowsum(H)
?rowsum
head(rowSums(H),6)
?sweep
MultinomialEM<-function(H=H,K=3,tau=0.05){
n<-nrow(H)
a<-matrix(NA,nrow=n,ncol=K)
index <- sample(1:n, K, replace=F)
t <- H[index, ]
t<-ifelse(t== 0, 0.01, t)
c <- rep(1/K, K)
b <- matrix(rep(0, ncol(H)*K), K)
sigma <- Inf
r <- 1
while(sigma >= tau){
a.old<-a
phi<-exp(H%*%t(log(t)))
a<-t(c*t(phi))/rowSums(t(c*t(phi)))
c<-colMeans(a)
for (k in 1:K) {
b[k,] <- colSums(sweep(H, 1, a[,k], '*')) }
t <- b/rowSums(b)
sigma <- ifelse(r==1, Inf, norm(a-a.old,"O"))
r <- r+1
}
m<-apply(a, 1, FUN = which.max)
return(m)
}
K_3 <- MultinomialEM(H, 3, 0.01)
K_4 <- MultinomialEM(H, 4, 0.01)
K_5 <- MultinomialEM(H, 5, 0.01)
a<-1/(1+exp(-24.3612))
a*(1-a)
a*(1-a)*0.003
a<-1/(1)
a<-1/(1+exp(-0.3977))
a*(1-a)*(-0.3977)
7.89202e-14*0.4474
7.89202e-14*0.8764
-0.09559496*0.4474
-0.09559496*0.8764
a<-1/(1+exp(-24.3612))
a*(1-a)*(0.0884)
a*(1-a)*(-0.3977)
a<-1/(1+exp(-0.3977))
-a*(1-a)*0.23
a<-1/(1+exp(0.3977))
-a*(1-a)*0.23
a<-1/(1+exp(0.3977))
-a*(1-a)*0.23
a<-1/(1+exp(0.3977))
a*(1-a)*(-0.23)
66.6665*0.0017+68.6225*0.0017
x=[a:b,step=5]
x=[a:b,step=5]
install.packages("shiny")
library(shiny)
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
runApp('Desktop/shiny')
runApp('Desktop/shiny')
runApp('Desktop/shiny')
shiny::runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
bootstrapPage(
tags$head(includeHTML("www/gtag.html")),
navbarPage(theme = shinytheme("flatly"),
collapsible = TRUE,
"NYC COVID-19",
id="nav",
### Home --------------------------------------------------------------------------------------------------------
tabPanel("Home",icon = icon("home"),
## Yue Liang Summary part -----------------------------------------------------------------------------------
fluidRow(
valueBoxOutput("total_case"),
valueBoxOutput("death_rate"),
valueBoxOutput("date")
),
box(width = "100%",height=300,includeHTML("wordcloud.html"))
## Xiaoli Sun Word Cloud part ------------------------------------------------------------------------------
# column(width=8,
#        box(width = 12,title = "Word Cloud of Covid-19",status = "primary",solidHeader = TRUE,
#            includeHTML("wordcloud.html")),
#        offset = 1
# )
),
## Hanyi Wang Home part -----------------------------------------------------------------------------------
### home end --------------------------------------------------------------------------------------------------------
### Xinying Feng MAP Part Begin ------------------------------------------------------------------------------------
tabPanel("MAP",icon = icon("map-marked-alt"),
div(class="outer",
tags$head(includeCSS("www/styles.css")),
leafletOutput("map",width="100%",height="100%"),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE, draggable = TRUE,
top = 160, left = 20, right = "auto", bottom = "auto", width = 250, height = "auto",
span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
h3(textOutput("reactive_case_count"), align = "right"),
h4(textOutput("reactive_death_count"), align = "right"),
checkboxGroupInput("Borough", "Choose Borough:",
choices = c("Manhattan", "Staten Island",
"Bronx", "Queens",
"Brooklyn"),
selected = c("Manhattan", "Staten Island",
"Bronx", "Queens",
"Brooklyn")
),
radioButtons("Category", "Choose category:",
choices = c("COVID_CASE_COUNT","COVID_DEATH_COUNT", "TOTAL_COVID_TESTS", "PERCENT_POSITIVE"))
)
)
),
### Xinying Feng MAP Part End -------------------------------------------------------------
### Xiaoli Sun statistical analysis part begin-------------------------------------------------
tabPanel("Time Series",icon = icon("chart-line"),
fluidPage(
fluidRow(column(12,
h3("Interactive Dashboard"),
"By default, the bar chart shows the sum of segments by year as the height of each bar, and pie chart shows the percentage of total crime shootings in each borough.",
tags$div(tags$ul(
tags$li("Hover the mouse over a year bar in histogram will modify the pie chart and legend."),
tags$li("Hover the mouse over pie slice should change the histogram.")
))),
box(width = 12,height = 500,status = "primary",solidHeader = FALSE,
includeHTML("index.html"))
))),
navbarMenu("Analysis", icon = icon("chart-area"),
#sub1 begin---------------------------------------------------------------------------------------
tabPanel("Borough",icon = icon("location-arrow"),
fluidPage(
fluidRow(column(12,
h3("Interactive Dashboard"),
"By default, the bar chart shows the sum of segments by year as the height of each bar, and pie chart shows the percentage of total crime shootings in each borough.",
tags$div(tags$ul(
tags$li("Hover the mouse over a year bar in histogram will modify the pie chart and legend."),
tags$li("Hover the mouse over pie slice should change the histogram.")
))),
box(width=6,
height=300,
status = "primary",solidHeader = FALSE,
includeHTML("by_boro1.html")),
hr(),
box(width=6,
height=300,
status = "primary",solidHeader = FALSE,
includeHTML("by_boro2.html"),
offset=1)
))),
#sub1 end---------------------------------------------------------------------------------------
#sub2 begin----------------------------------------------------------------------------------------
tabPanel("Race",icon = icon("user-friends"),
fluidPage(
fluidRow(column(12,
h3("Interactive Dashboard"),
"By default, the bar chart shows the sum of segments by year as the height of each bar, and pie chart shows the percentage of total crime shootings in each borough.",
tags$div(tags$ul(
tags$li("Hover the mouse over a year bar in histogram will modify the pie chart and legend."),
tags$li("Hover the mouse over pie slice should change the histogram.")
))),
box(width = 12,
height=500,
status = "primary",solidHeader = FALSE,
includeHTML("by_race_dashboard.html"))
))),
#sub2 end--------------------------------------------------------------------------------------------
#sub3 begin----------------------------------------------------------------------------------------
tabPanel("Wealth",icon = icon("dollar-sign"),
fluidPage(
fluidRow(column(12,
h3("Interactive Dashboard"),
"By default, the bar chart shows the sum of segments by year as the height of each bar, and pie chart shows the percentage of total crime shootings in each borough.",
tags$div(tags$ul(
tags$li("Hover the mouse over a year bar in histogram will modify the pie chart and legend."),
tags$li("Hover the mouse over pie slice should change the histogram.")
)))
# ,
# box(width = 12, height = 500,
#     status = "primary",solidHeader = FALSE,
#        includeHTML("by-poverty.html"))
)))),
#sub3 end--------------------------------------------------------------------------------------------
## Hanyi Wang About --------------------------------------------------------------------------------------------------------
tabPanel( "About",icon = icon("book-open"),
fluidPage(
mainPanel( width=12,
h1(strong("What you'll find here"),align = "center")
)))
## Hanyi About end --------------------------------------------------------------------------------------------------------
))
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
by_boro <- read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/by_boro.csv")
by_boro <- read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/by_boro.csv")
by_boro <- read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/by-boro.csv")
by_boro
by_boro <- dataframe(read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/by-boro.csv"))
by_boro <- data_frame(read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/by-boro.csv"))
by_boro <- data.frame(read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/by-boro.csv"))
by_boro
by_boro$CASE_RATE
ggplotly(by_boro$CASE_RATE)
ggplot(by_boro, aes(y=value, x=BOROUGH_GROUP))
ggplot(by_boro, aes(y=CASE_RATE, x=BOROUGH_GROUP))
ggplot(by_boro, aes(y=CASE_RATE, x=BOROUGH_GROUP)) +
geom_bar(stat="identity")
ggplot(by_boro, aes(y=CASE_RATE, x=BOROUGH_GROUP)) +
geom_bar(stat="identity",color="blue")
ggplot(by_boro, aes(y=CASE_RATE, x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="blue")
ggplot(by_boro, aes(y=CASE_RATE, x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="light-blue")
ggplot(by_boro, aes(y=CASE_RATE, x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
output$case_rate<- renderPlotly({
ggplotly(CASE_RATE)
})
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
by_boro
c(CASE_RATE,HOSPITALIZED_RATE,HOSPITALIZED_RATE)
ggplot(by_boro, aes(fill=c("CASE_RATE" , "HOSPITALIZED_RATE" , "DEATH_RATE"),y=by_boro[:,1:3], x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
ggplot(by_boro, aes(fill=c("CASE_RATE" , "HOSPITALIZED_RATE" , "DEATH_RATE"),y=by_boro[,1:3], x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
ggplot2::barplot(by_boro, aes(fill=c("CASE_RATE" , "HOSPITALIZED_RATE" , "DEATH_RATE"),x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
ggplot(by_boro, aes(fill=c("CASE_RATE" , "HOSPITALIZED_RATE" , "DEATH_RATE"), x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
by_boro
by_boro$CASE_RATE/100000
by_boro$CASE_RATE <- by_boro$CASE_RATE/100000
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
ggplotly(CASE_COUNT)
CASE_COUNT <- ggplot(by_boro, aes(y=CASE_COUNT, x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
ggplotly(CASE_COUNT)
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
output$case_rate<- renderPlotly({
ggplotly(CASE_RATE)
})
case_rate
CASE_RATE <- ggplot(by_boro, aes(y=CASE_RATE, x=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
case_rate
ggplotly(CASE_RATE)
by_boro
reorder(BOROUGH_GROUP,c(1,2,3,4,5,6))
reorder(by_boro$BOROUGH_GROUP,c(1,2,3,4,5,6))
ggplot(by_boro, aes(y=CASE_RATE, x=reorder(by_boro$BOROUGH_GROUP,c(1,2,3,4,5,6)))) +
geom_bar(stat="identity",fill="lightblue")
ggplot(by_boro, aes(y=CASE_RATE, x=reorder(by_boro$BOROUGH_GROUP,c(1,2,3,4,5,6))),xname=BOROUGH_GROUP) +
geom_bar(stat="identity",fill="lightblue")
ggplot(by_boro, aes(y=CASE_RATE, x=reorder(by_boro$BOROUGH_GROUP,c(1,2,3,4,5,6)),xname=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
ggplot(by_boro, aes(y=CASE_RATE, x=reorder(by_boro$BOROUGH_GROUP,c(1,2,3,4,5,6)),xlab=BOROUGH_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
ggplot(by_boro, aes(y=CASE_RATE, x=reorder(by_boro$BOROUGH_GROUP,c(1,2,3,4,5,6)))) +
geom_bar(stat="identity",fill="lightblue") +
xlab("BOROUGH_GROUP")
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp()
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp()
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
by_poverty <- data.frame(read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/by-poverty.csv"))
by_poverty
ggplot(by_poverty, aes(y=CASE_COUNT, x=POVERTY_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
by_poverty
poverty <- ggplot(by_poverty, aes(y=CASE_RATE_ADJ, x=POVERTY_GROUP)) +
geom_bar(stat="identity",fill="lightblue")
ggplotly(poverty)
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
ggplotly(poverty)
poverty <- ggplot(by_poverty, aes(y=CASE_RATE_ADJ, x=POVERTY_GROUP)) +
geom_bar(stat="identity",fill="#edae49")
ggplotly(poverty)
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
index <- data.frame(read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/case-hosp-death.csv"))
index
ggplot(by_poverty, aes(x=DATE_OF_INTEREST,y=CASE_COUNT)) +
geom_line()
library(reshape2)
index_df <- melt(index,id="DATE_OF_INTEREST")
index_df
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
index <- data.frame(read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/case-hosp-death.csv"))
index_df <- melt(index,id="DATE_OF_INTEREST")
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value,colour=variable,group=variable))
+ geom_line()
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value,colour=variable,group=variable))
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value,colour=variable,group=variable))
+ geom_line()
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value)) +
geom_line(aes(color = variable), size = 1)
index_df
index
index_df <- melt(index[,1:3],id="DATE_OF_INTEREST")
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value)) +
geom_line(aes(color = variable), size = 1)
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value,color=variable,group= variable)) +
geom_line()
index_df <- melt(index[,1:4],id="DATE_OF_INTEREST")
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value,color=variable,group= variable)) +
geom_line()
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value,color=variable,group= variable)) +
geom_line() +
scale_x_date(date_labels = "%b/%d")
index_df$DATE_OF_INTEREST<- as.Date(index_df$DATE_OF_INTEREST,format = "%m/%d/%y")
index_df <- melt(index[,1:4],id="DATE_OF_INTEREST")
as.Date(index_df$DATE_OF_INTEREST,format = "%m/%d/%y")
index_df$DATE_OF_INTEREST<- as.Date(index_df$DATE_OF_INTEREST,format = "%m/%d/%y")
ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value,color=variable,group= variable)) +
geom_line() +
scale_x_date(date_labels = "%b/%d")
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
index_gg <- ggplot(index_df,aes(x=DATE_OF_INTEREST,y=value,color=variable,group= variable)) +
geom_line() +
scale_x_date(date_labels = "%b/%d")
ggplotly(index_gg)
output$index_plot1
index_plot1
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
runApp('Documents/GitHub/Fall2020-Project2-group6/app')
