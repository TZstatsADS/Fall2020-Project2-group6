y.test.hat.1 <- predict(m1,newdata=data.frame(x=test_data$x))
mse_test_1 <- mse(test_data$y, y.test.hat.1)
mse_test_1
m2 <- lm(y ~ poly(x, 2, raw = TRUE), data = train_data)
y.train.hat.2 <- predict(m2,newdata=data.frame(x=train_data$x))
mse_train_2 <- mse(train_data$y, y.train.hat.2)
mse_train_2
y.test.hat.2 <- predict(m2, newdata=data.frame(x=test_data$x))
mse_test_2 <- mse(test_data$y, y.test.hat.2)
mse_test_2
m3 <- lm(y ~ poly(x, 3, raw = TRUE), data = train_data)
y.train.hat.3 <- predict(m3,newdata=data.frame(x=train_data$x))
mse_train_3 <- mse(train_data$y, y.train.hat.3)
mse_train_3
y.test.hat.3 <- predict(m3,newdata=data.frame(x=test_data$x))
mse_test_3 <- mse(test_data$y, y.test.hat.3)
mse_test_3
MSE_train <- c(mse_train_1, mse_train_2, mse_train_3)
MSE_train
MSE_test <- c(mse_test_1, mse_test_2, mse_test_3)
MSE_test
degree <- c(1:3)
plot(degree,, main="MSE vs degree(model complexity)", ylim=c(11.78,13.36), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
set.seed(0)
train_data <- data %>%
sample_frac(.60)
test_data <- data %>%
anti_join(train_data, by = "x")
test_data
train_data
mse <- function(y, pred) mean((pred - y)^2)
m1 <- lm(y ~ poly(x, 1, raw = TRUE), data = train_data)
y.train.hat.1 <- predict(m1,newdata=data.frame(x=train_data$x))
mse_train_1 <- mse(train_data$y, y.train.hat.1)
mse_train_1
y.test.hat.1 <- predict(m1,newdata=data.frame(x=test_data$x))
mse_test_1 <- mse(test_data$y, y.test.hat.1)
mse_test_1
m2 <- lm(y ~ poly(x, 2, raw = TRUE), data = train_data)
y.train.hat.2 <- predict(m2,newdata=data.frame(x=train_data$x))
mse_train_2 <- mse(train_data$y, y.train.hat.2)
mse_train_2
y.test.hat.2 <- predict(m2, newdata=data.frame(x=test_data$x))
mse_test_2 <- mse(test_data$y, y.test.hat.2)
mse_test_2
m3 <- lm(y ~ poly(x, 3, raw = TRUE), data = train_data)
y.train.hat.3 <- predict(m3,newdata=data.frame(x=train_data$x))
mse_train_3 <- mse(train_data$y, y.train.hat.3)
mse_train_3
y.test.hat.3 <- predict(m3,newdata=data.frame(x=test_data$x))
mse_test_3 <- mse(test_data$y, y.test.hat.3)
mse_test_3
MSE_train <- c(mse_train_1, mse_train_2, mse_train_3)
MSE_train
degree <- c(1:3)
plot(degree,, main="MSE vs degree(model complexity)", ylim=c(11.78,13.36), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
test_data <- data %>%
anti_join(train_data, by = "x")
test_data
set.seed(0)
train_data <- data %>%
sample_frac(.60)
train_data
library(tidyverse)
set.seed(0)
x <- seq(1,1000,1)
true.f <- function(x) {
return(10*x+1)
}
y <- true.f(x)+rnorm(n=1000, mean=0, sd=4)
data <- tibble(x,y)
head(data,5)
set.seed(0)
train_data <- data %>%
sample_frac(.60)
head(train_data,5)
test_data <- data %>%
anti_join(train_data, by = "x")
head(test_data,5)
MSE_train <- c(mse_train_1, mse_train_2, mse_train_3)
MSE_train
MSE_test <- c(mse_test_1, mse_test_2, mse_test_3)
MSE_test
degree <- c(1:3)
plot(degree,, main="MSE vs degree(model complexity)", ylim=c(11.78,13.36), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
degree <- c(1:3)
plot(degree,, main="MSE vs degree(model complexity)", ylim=c(11.78,13.36), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
degree <- c(1:3)
plot(degree,, main="MSE vs degree(model complexity)", ylim=c(11.78,13.36), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
degree <- c(1:3)
plot(degree,, main="MSE vs degree(model complexity)", ylim=c(11.78,13.36), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
set.seed(0)
x <- seq(1,1000,1)
true.f <- function(x) {
return(10*x+1)
}
y <- true.f(x)+rnorm(n=1000, mean=0, sd=4)
data <- tibble(x,y)
head(data,5)
set.seed(0)
train_data <- data %>%
sample_frac(.60)
head(train_data,5)
test_data <- data %>%
anti_join(train_data, by = "x")
head(test_data,5)
mse <- function(y, pred) mean((pred - y)^2)
m1 <- lm(y ~ poly(x, 1, raw = TRUE), data = train_data)
y.train.hat.1 <- predict(m1,newdata=data.frame(x=train_data$x))
mse_train_1 <- mse(train_data$y, y.train.hat.1)
mse_train_1
y.test.hat.1 <- predict(m1,newdata=data.frame(x=test_data$x))
mse_test_1 <- mse(test_data$y, y.test.hat.1)
mse_test_1
m2 <- lm(y ~ poly(x, 2, raw = TRUE), data = train_data)
y.train.hat.2 <- predict(m2,newdata=data.frame(x=train_data$x))
mse_train_2 <- mse(train_data$y, y.train.hat.2)
mse_train_2
y.test.hat.2 <- predict(m2, newdata=data.frame(x=test_data$x))
mse_test_2 <- mse(test_data$y, y.test.hat.2)
mse_test_2
m3 <- lm(y ~ poly(x, 3, raw = TRUE), data = train_data)
y.train.hat.3 <- predict(m3,newdata=data.frame(x=train_data$x))
mse_train_3 <- mse(train_data$y, y.train.hat.3)
mse_train_3
y.test.hat.3 <- predict(m3,newdata=data.frame(x=test_data$x))
mse_test_3 <- mse(test_data$y, y.test.hat.3)
mse_test_3
MSE_train <- c(mse_train_1, mse_train_2, mse_train_3)
MSE_train
MSE_test <- c(mse_test_1, mse_test_2, mse_test_3)
MSE_test
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)", ylim=c(11.78,13.36), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)", ylim=c(15.71,16.252), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
set.seed(0)
x <- runif(1000,1,1000)
true.f <- function(x) {
return(10*x+1)
}
y <- true.f(x)+rnorm(n=1000, mean=0, sd=4)
data <- tibble(x,y)
head(data,5)
library(tidyverse)
set.seed(0)
x <- runif(1000,1,100)
true.f <- function(x) {
return(10*x+1)
}
y <- true.f(x)+rnorm(n=1000, mean=0, sd=4)
data <- tibble(x,y)
head(data,5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
set.seed(0)
x <- runif(1000,1,100)
true.f <- function(x) {
return(10*x+1)
}
y <- true.f(x)+rnorm(n=1000, mean=0, sd=4)
data <- tibble(x,y)
head(data,5)
set.seed(0)
train_data <- data %>%
sample_frac(.60)
head(train_data,5)
test_data <- data %>%
anti_join(train_data, by = "x")
head(test_data,5)
mse <- function(y, pred) mean((pred - y)^2)
m1 <- lm(y ~ poly(x, 1, raw = TRUE), data = train_data)
y.train.hat.1 <- predict(m1,newdata=data.frame(x=train_data$x))
mse_train_1 <- mse(train_data$y, y.train.hat.1)
mse_train_1
y.test.hat.1 <- predict(m1,newdata=data.frame(x=test_data$x))
mse_test_1 <- mse(test_data$y, y.test.hat.1)
mse_test_1
m2 <- lm(y ~ poly(x, 2, raw = TRUE), data = train_data)
y.train.hat.2 <- predict(m2,newdata=data.frame(x=train_data$x))
mse_train_2 <- mse(train_data$y, y.train.hat.2)
mse_train_2
y.test.hat.2 <- predict(m2, newdata=data.frame(x=test_data$x))
mse_test_2 <- mse(test_data$y, y.test.hat.2)
mse_test_2
m3 <- lm(y ~ poly(x, 3, raw = TRUE), data = train_data)
y.train.hat.3 <- predict(m3,newdata=data.frame(x=train_data$x))
mse_train_3 <- mse(train_data$y, y.train.hat.3)
mse_train_3
y.test.hat.3 <- predict(m3,newdata=data.frame(x=test_data$x))
mse_test_3 <- mse(test_data$y, y.test.hat.3)
mse_test_3
MSE_train <- c(mse_train_1, mse_train_2, mse_train_3)
MSE_train
MSE_test <- c(mse_test_1, mse_test_2, mse_test_3)
MSE_test
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)", ylim=c(15.71,16.252), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
MSE_test
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
MSE_train
#Plot
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)", ylim=c(15.71,16.252), ylab="MSE", xlab = "degree")
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)", ylim=c(15.71,16.252), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("center",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)", ylim=c(15.71,16.252), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("below",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)", ylim=c(15.8,16.252), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("bottom",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
MSE_test[2]=MSE_test[2]+mse_test_2
source('~/Desktop/5241MachineLearning/hw1111.R')
#Compute MSE for cubic model:
m3 <- lm(y ~ poly(x, 3, raw = TRUE), data = train_data)
MSE_test
MSE_train
plot(degree,MSE_train, main="MSE vs degree(model complexity)",
ylim=c(15.8,16.252), ylab="MSE", xlab = "degree")
library(tidyverse)
mse <- function(y, pred) mean((pred - y)^2)
#Prepare for calculate average MSE of 1000 experiments
MSE_train <- c(0,0,0)
MSE_test <- c(0,0,0)
for(i in 1:1000) {
set.seed(0)
#generate total_data where y=10x+1
x <- runif(1000,1,100)
true.f <- function(x) {
return(10*x+1)
}
y <- true.f(x)+rnorm(n=1000, mean=0, sd=4)
data <- tibble(x,y)
#Randomly split total_tada into train_data and test_data
set.seed(0)
train_data <- data %>%
sample_frac(.60)
test_data <- data %>%
anti_join(train_data, by = "x")
#linear model
m1 <- lm(y ~ poly(x, 1, raw = TRUE), data = train_data)
y.train.hat.1 <- predict(m1,newdata=data.frame(x=train_data$x))
mse_train_1 <- mse(train_data$y, y.train.hat.1)
MSE_train[1]=MSE_train[1]+mse_train_1
y.test.hat.1 <- predict(m1,newdata=data.frame(x=test_data$x))
mse_test_1 <- mse(test_data$y, y.test.hat.1)
MSE_test[1]=MSE_test[1]+mse_test_1
#quadratic mode
m2 <- lm(y ~ poly(x, 2, raw = TRUE), data = train_data)
y.train.hat.2 <- predict(m2,newdata=data.frame(x=train_data$x))
mse_train_2 <- mse(train_data$y, y.train.hat.2)
MSE_train[2]=MSE_train[2]+mse_train_2
y.test.hat.2 <- predict(m2, newdata=data.frame(x=test_data$x))
mse_test_2 <- mse(test_data$y, y.test.hat.2)
MSE_test[2]=MSE_test[2]+mse_test_2
#Compute MSE for cubic model:
m3 <- lm(y ~ poly(x, 3, raw = TRUE), data = train_data)
y.train.hat.3 <- predict(m3,newdata=data.frame(x=train_data$x))
mse_train_3 <- mse(train_data$y, y.train.hat.3)
MSE_train[3]=MSE_train[3]+mse_train_3
y.test.hat.3 <- predict(m3,newdata=data.frame(x=test_data$x))
mse_test_3 <- mse(test_data$y, y.test.hat.3)
MSE_test[3]=MSE_test[3]+mse_test_3
}
#take average. MSE_train is decreasing when degree increases.
MSE_train <- MSE_train/1000
MSE_train
#take average. MSE_test is increasing when degree increases.
MSE_test <- MSE_test/1000
MSE_test
#Plot
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)",
ylim=c(min(MSE_test),max(MSE_train)), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("bottom",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
MSE_test
MSE_train
MSE_test
source('~/Desktop/5241MachineLearning/hw1 .R')
degree <- c(1:3)
plot(degree,MSE_train, main="MSE vs degree(model complexity)",
ylim=c(15.5,15.9), ylab="MSE", xlab = "degree")
lines(degree, MSE_train,lwd=1.5,col="green")
points(degree,MSE_train,pch=20,cex=1.5,col="green")
lines(degree, MSE_test,lwd=1.5,col="red")
points(degree,MSE_test,pch=20,cex=1.5,col="red")
legend("bottom",
legend=c("MSE_test", "MSE_train"),
fill=c("red","green"),
cex=1)
source('~/Desktop/5241MachineLearning/hw1 .R')
2^16
install.packages("reticulate")
install.packages("shiny")
install.packages("shinydashboard")
install.packages("shinythemes")
install.packages("plotly")
install.packages("wordcloud2")
install.packages("dashboardthemes")
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'ppckl66801108')
ppckl66801108
install.packages(as.vector(needed_packages))
install.packages("dashboardthemes")
updateR(admin_password = 'Admin user password')
library(updateR)
library(devtools)
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
version
install.packages("dashboardthemes")
library(devtools)
install_github("nik01010/dashboardthemes")
install.packages("flexdashboard")
install.packages("wordcloud2")
shiny::runApp('Desktop/6895Project')
install.packages("shinydashboard")
install.packages(c("plotly", "shinythemes"))
install.packages(c("ggplot2", "plotly", "reticulate", "tidyverse"))
py_run_string("import gensim")
library(reticulate)
py_run_string("import gensim")
Y
library(reticulate)
py_run_string("import gensim")
library(reticulate)
py_run_string("import pandas")
library(reticulate)
use_python("/opt/anaconda3/bin/python")
py_run_string("import pandas")
library(reticulate)
use_python("/opt/anaconda3/bin/python")
py_run_string("import pandas")
library(reticulate)
use_python("/opt/anaconda3/bin/python3.7/bin/python")
py_run_string("import pandas")
source('~/Untitled.R')
library(reticulate)
use_python("~/opt/anaconda3/bin/python3.7/bin/python")
py_install("pandas")
py_run_string("import pandas")
library(reticulate)
use_python("~/opt/anaconda3/bin/python3.7/bin/python")
py_install("pandas")
py_install("gensim")
py_run_string("import pandas")
py_run_string("import gensim")
library(reticulate)
use_python("~/opt/anaconda3/bin/python3.7/bin/python")
py_install("pandas")
py_install("gensim")
py_run_string("import pandas")
py_run_string("import gensim.models")
library(reticulate)
use_python("~/opt/anaconda3/bin/python3.7/bin/python")
py_install("pandas")
py_install("gensim")
py_run_string("import smart_open")
py_run_string("import gensim.models")
library(reticulate)
use_python("~/opt/anaconda3/bin/python3.7/bin/python")
py_install("pandas")
py_install("gensim")
py_run_string("import smart_open")
py_run_string("from smart_open import open")
py_run_string("import gensim.models")
library(reticulate)
use_python("~/opt/anaconda3/bin/python3.7/bin/python")
py_install("pandas")
py_run_string("import smart_open")
py_run_string("from smart_open import open")
library(reticulate)
use_python("~/opt/anaconda3/lib/python3.7")
py_install("pandas")
py_run_string("import smart_open")
py_run_string("from smart_open import open")
library(reticulate)
use_python("~/opt/anaconda3/lib/python3.7")
py_install("pandas")
py_install("import gensim")
py_run_string("import smart_open")
py_run_string("from smart_open import open")
library(reticulate)
use_python("~/opt/anaconda3/bin/python")
py_install("pandas")
py_install("gensim")
py_run_string("import gensim")
library(reticulate)
use_python("~/opt/anaconda3/bin/python")
py_install("pandas")
py_install("gensim")
py_run_string("import gensim")
install.packages(c("rgdal", "tmap"))
install.packages(c("rgdal", "tmap"))
shiny::runApp('Documents/GitHub/Fall2020-Project2-group6/app')
R.version.string
shiny::runApp('Documents/GitHub/Fall2020-Project2-group6/app')
